<?xml version="1.0" encoding="UTF-8"?>
<testExecutions version="1">
  <file path="C:\Users\leoso\Documentos\Máster\TFM\Backend\tests\routes\actors.spec.ts">
    <testCase name="GET /actors/casting Should return code 400" duration="174"/>
    <testCase name="GET /actors/casting Should return code 500" duration="168"/>
    <testCase name="GET /actors/casting Should return code 200" duration="26"/>
    <testCase name="GET /actors/casting Should return Actor[]" duration="36"/>
    <testCase name="GET /actors Should return code 400" duration="32"/>
    <testCase name="GET /actors Should return code 500" duration="29"/>
    <testCase name="GET /actors Should return code 200" duration="33"/>
    <testCase name="GET /actors Should return ActorProfile" duration="24"/>
    <testCase name="GET /actors/movies Should return code 400" duration="27"/>
    <testCase name="GET /actors/movies Should return code 500" duration="29"/>
    <testCase name="GET /actors/movies Should return code 200" duration="18"/>
    <testCase name="GET /actors/movies Should return Movies[]" duration="24"/>
  </file>
  <file path="C:\Users\leoso\Documentos\Máster\TFM\Backend\tests\routes\movies.spec.ts">
    <testCase name="GET /movies/search Should return code 400" duration="102"/>
    <testCase name="GET /movies/search Should return code 500" duration="197"/>
    <testCase name="GET /movies/search Should return code 200" duration="18"/>
    <testCase name="GET /movies/search Should return MoviePoster[]" duration="40"/>
    <testCase name="GET /movies Should return code 400" duration="29"/>
    <testCase name="GET /movies Should return code 500" duration="33"/>
    <testCase name="GET /movies Should return code 200" duration="19"/>
    <testCase name="GET /movies Should return Movie" duration="26"/>
    <testCase name="GET /movies/carousel Should return code 500" duration="25"/>
    <testCase name="GET /movies/carousel Should return code 200" duration="22"/>
    <testCase name="GET /movies/carousel Should return MoviePoster[]" duration="24"/>
    <testCase name="GET /movies/home-list Should return code 500" duration="24"/>
    <testCase name="GET /movies/home-list Should return code 200" duration="25"/>
    <testCase name="GET /movies/home-list Should return MoviePoster[]" duration="21"/>
  </file>
  <file path="C:\Users\leoso\Documentos\Máster\TFM\Backend\tests\routes\users.spec.ts">
    <testCase name="POST /users/signUp Should return code 400 Bad request" duration="55"/>
    <testCase name="POST /users/signUp Should return code 500 Error creating user in firebase auth" duration="49"/>
    <testCase name="POST /users/signUp Should return code 500 Error uploading image in firebase storage" duration="27"/>
    <testCase name="POST /users/signUp Should return code 500 Error updating photo URL in firabase Auth" duration="29"/>
    <testCase name="POST /users/signUp Should return code 201 User created" duration="34"/>
    <testCase name="PUT /users/updateData Should return code 400 Bad request. From data not provided" duration="34"/>
    <testCase name="PUT /users/updateData Should return code 400 Bad request. IdToken not provided" duration="39"/>
    <testCase name="PUT /users/updateData Should return code 401 Unauthorized" duration="35"/>
    <testCase name="PUT /users/updateData Should return code 500 Error saving new photo" duration="42"/>
    <testCase name="PUT /users/updateData Should return code 500 Error updating user data with file given." duration="33"/>
    <testCase name="PUT /users/updateData Should return code 200 with file given." duration="37"/>
    <testCase name="PUT /users/updateData Should return code 500 Error updating user data without file given." duration="33"/>
    <testCase name="PUT /users/updateData Should return code 200 without file given." duration="29"/>
    <testCase name="DELETE /users Should return code 400 Bad request. IdToken not found on request" duration="25"/>
    <testCase name="DELETE /users Should return code 401 Unauthorized" duration="19"/>
    <testCase name="DELETE /users Should return code 500 Error deleting user data" duration="21"/>
    <testCase name="DELETE /users Should return code 500 Error deleting user profile picture" duration="27"/>
    <testCase name="DELETE /users Should return code 500 Error deleting user reviews" duration="21"/>
    <testCase name="DELETE /users Should return code 200 User deleted successfully" duration="27"/>
  </file>
  <file path="C:\Users\leoso\Documentos\Máster\TFM\Backend\tests\routes\verification.spec.ts">
    <testCase name="POST /verification Should return code 400 Bad request. Text request required." duration="70"/>
    <testCase name="POST /verification Should return code 400 Bad request. IdToken not found on request" duration="19"/>
    <testCase name="POST /verification Should return code 401 Unauthorized" duration="32"/>
    <testCase name="POST /verification Should return code 500 Error saving request" duration="24"/>
    <testCase name="POST /verification Should return code 201 and save the request successfully" duration="20"/>
    <testCase name="GET /verification Should return code 400 Bad request. IdToken not found on request" duration="26"/>
    <testCase name="GET /verification Should return code 401 Unauthorized" duration="22"/>
    <testCase name="GET /verification Should return code 403 Forbidden. User is not an administrator" duration="19"/>
    <testCase name="GET /verification Should return code 400 Error fetching verification requests" duration="26"/>
    <testCase name="GET /verification Should return code 200 and list of verification requests" duration="22"/>
    <testCase name="PATCH /verification Should return code 400 Bad request. IdToken not found on request" duration="28"/>
    <testCase name="PATCH /verification Should return code 401 Unauthorized. User is not an administrator" duration="33"/>
    <testCase name="PATCH /verification Should return code 401 Unauthorized. Invalid admin IdToken." duration="20"/>
    <testCase name="PATCH /verification Should return code 400 Bad request. RequestID or newStatus not provided" duration="21"/>
    <testCase name="PATCH /verification Should return code 400 Error updating request status" duration="24"/>
    <testCase name="PATCH /verification Should return code 500 Error changing user role" duration="25"/>
    <testCase name="PATCH /verification Should return code 200 User role changed successfully" duration="24"/>
  </file>
  <file path="C:\Users\leoso\Documentos\Máster\TFM\Backend\tests\routes\reviews.spec.ts">
    <testCase name="POST /reviews Should return code 400 without movie_id" duration="36"/>
    <testCase name="POST /reviews Should return code 400 without Authorization header" duration="31"/>
    <testCase name="POST /reviews Should return code 401 Unauthorized" duration="28"/>
    <testCase name="POST /reviews Should return code 500 database upload failed" duration="21"/>
    <testCase name="POST /reviews Should return code 201" duration="20"/>
    <testCase name="GET /reviews Should return code 400 without movie_id" duration="31"/>
    <testCase name="GET /reviews Should return code 500 error fetching database" duration="22"/>
    <testCase name="GET /reviews Should return code 200" duration="17"/>
    <testCase name="DELETE /reviews Should return code 400 without any param" duration="22"/>
    <testCase name="DELETE /reviews Should return code 400 without Authorization header" duration="23"/>
    <testCase name="DELETE /reviews Should return code 401 Unauthorized" duration="28"/>
    <testCase name="DELETE /reviews Should return code 500 database deletion failed" duration="35"/>
    <testCase name="DELETE /reviews Should return code 200" duration="22"/>
  </file>
  <file path="C:\Users\leoso\Documentos\Máster\TFM\Backend\tests\services\firebaseRTDB.spec.ts">
    <testCase name="FirebaseRTDB setReview should return a review key on success" duration="6"/>
    <testCase name="FirebaseRTDB setReview should throw a CustomError on failure" duration="35"/>
    <testCase name="FirebaseRTDB getReviews should return all reviews for a movie" duration="6"/>
    <testCase name="FirebaseRTDB getReviews should throw a CustomError if spectators reviews fetch fails" duration="5"/>
    <testCase name="FirebaseRTDB removeReview should delete a review" duration="3"/>
    <testCase name="FirebaseRTDB removeReview should throw a CustomError on failure" duration="2"/>
    <testCase name="FirebaseRTDB deleteUserReviews should delete user reviews from both critic and spectator categories" duration="5"/>
    <testCase name="FirebaseRTDB getVerificationRequests should return all verification requests" duration="3"/>
    <testCase name="FirebaseRTDB getVerificationRequests should throw a CustomError if no requests are found" duration="2"/>
    <testCase name="FirebaseRTDB setVerificationRequest should return a request key on success" duration="2"/>
    <testCase name="FirebaseRTDB setVerificationRequest should throw a CustomError on failure" duration="2"/>
    <testCase name="FirebaseRTDB updateRequestStatus should update the request status" duration="4"/>
    <testCase name="FirebaseRTDB updateRequestStatus should throw a CustomError if the request is not found" duration="7"/>
    <testCase name="FirebaseRTDB moveReviews should move user reviews from one path to another" duration="2"/>
    <testCase name="FirebaseRTDB moveReviews should throw a CustomError if the move fails" duration="4"/>
  </file>
  <file path="C:\Users\leoso\Documentos\Máster\TFM\Backend\tests\services\firebaseAuth.spec.ts">
    <testCase name="FirebaseAuth createUser should return a user record on success" duration="5"/>
    <testCase name="FirebaseAuth createUser should throw a CustomError on failure" duration="18"/>
    <testCase name="FirebaseAuth verifyIdToken should return a decoded token on success" duration="1"/>
    <testCase name="FirebaseAuth verifyIdToken should throw a CustomError on failure" duration="2"/>
    <testCase name="FirebaseAuth updateUser should update a user on success" duration="1"/>
    <testCase name="FirebaseAuth updateUser should throw a CustomError on failure" duration="2"/>
    <testCase name="FirebaseAuth changeUserRole should update the user role on success" duration="2"/>
    <testCase name="FirebaseAuth changeUserRole should throw a CustomError on failure" duration="2"/>
    <testCase name="FirebaseAuth deleteUser should delete a user on success" duration="2"/>
    <testCase name="FirebaseAuth deleteUser should throw a CustomError on failure" duration="4"/>
  </file>
  <file path="C:\Users\leoso\Documentos\Máster\TFM\Backend\tests\models\actor.spec.ts">
    <testCase name="Actor Model should create an actor with correct properties" duration="5"/>
    <testCase name="ActorProfile Model should create an actor profile with correct properties" duration="3"/>
    <testCase name="genderToString Function should return correct string for gender 0" duration="2"/>
    <testCase name="genderToString Function should return correct string for gender 1" duration="2"/>
    <testCase name="genderToString Function should return correct string for gender 2" duration="1"/>
    <testCase name="genderToString Function should return correct string for gender 3" duration="1"/>
    <testCase name="genderToString Function should return empty string for unknown gender" duration="1"/>
  </file>
  <file path="C:\Users\leoso\Documentos\Máster\TFM\Backend\tests\models\verificationRequest.spec.ts">
    <testCase name="VerificationRequest Model should create a verification request with all properties" duration="5"/>
    <testCase name="VerificationRequest Model should create a verification request without optional properties" duration="2"/>
  </file>
  <file path="C:\Users\leoso\Documentos\Máster\TFM\Backend\tests\models\movie.spec.ts">
    <testCase name="CarouselMovie Model should create a carousel movie with correct properties" duration="4"/>
    <testCase name="Genre Model should create a genre with correct properties" duration="1"/>
    <testCase name="Movie Model should create a movie with correct properties" duration="2"/>
    <testCase name="MoviePoster Model should create a movie poster with correct properties" duration="2"/>
  </file>
  <file path="C:\Users\leoso\Documentos\Máster\TFM\Backend\tests\models\customError.spec.ts">
    <testCase name="CustomError should create an instance of CustomError with a message and original error" duration="11"/>
    <testCase name="CustomError should create an instance of CustomError with only a message" duration="2"/>
    <testCase name="CustomError should capture the stack trace" duration="2"/>
  </file>
  <file path="C:\Users\leoso\Documentos\Máster\TFM\Backend\tests\models\user.spec.ts">
    <testCase name="UserFirebaseAuth Model should create a user with correct properties" duration="5"/>
    <testCase name="isValidEmail Function should return true for a valid email" duration="1"/>
    <testCase name="isValidEmail Function should return false for an email without @ symbol" duration="1"/>
    <testCase name="isValidEmail Function should return false for an email without domain" duration="1"/>
    <testCase name="isValidEmail Function should return false for an email without top-level domain" duration="1"/>
    <testCase name="isValidEmail Function should return false for an email with spaces" duration="1"/>
    <testCase name="isValidEmail Function should return false for an empty string" duration="1"/>
  </file>
  <file path="C:\Users\leoso\Documentos\Máster\TFM\Backend\tests\models\reviews.spec.ts">
    <testCase name="Review Model should create a review with correct properties" duration="5"/>
    <testCase name="AllReviews Model should create an all reviews object with correct properties" duration="2"/>
  </file>
</testExecutions>